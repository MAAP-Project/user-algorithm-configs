###############################################################################                  
#
# Algorithm Configuration Template
#
# This is an annotated example of an algorithm configuration yaml file. The
# contents of this file are used to register an algorithm to the MAAP DPS.
# For a full example showing how to register an algorithm see documentation
# here: https://docs.maap-project.org/en/latest/getting_started/running_at_scale.html#Register-an-Algorithm
#
# Note:
# This template does not describe an existing algorithm and if used as-is will
# not register successfully. Replace all relevant fields with values specific
# to your algorithm.
#
###############################################################################


###############################################################################
# Algorithm Name (required)
#
# This is a string that will be used to build the algorithm identifier within
# the MAAP. The identifier, which is what users will reference when they want
# to run an algorithm, will be defined as algorithm_name:algorithm_version.
algorithm_name: dps-unit-test


###############################################################################
# Algorithm Version (required)
#
# The algorithm version is equivalent to the code repository's branch. This is
# a string that will be used to build the algorithm identifier within the
# MAAP. The identifier will be defined as algorithm_name:algorithm_version.
#
# Note: 
# If an algorithm with a given name and version is already registered,
# reregistering will override the existing registered algorithm. For example,
# if algorithm dps-unit-test:main is already a registerd algorithm,
# reregistering it will override the existing dps-unit-test:main. However, if the
# user registers algorithm dps-unit-test:develop, a new algorithm will be
# registered and both dps-unit-test:main and dps-unit-test:develop will be
# available for execution.
algorithm_version: main


############################################################################### 
# Repository URL (required)
#
# This is the URL to the public repository where the algorithm code resides.
repository_url: https://github.com/MAAP-Project/dps-unit-test.git


############################################################################### 
# Docker Container URL (required)
#
# This is the URL to the docker container to use for algorithm execution.
#
# Note:
# Each docker container available on MAAP supports a different suite of
# packages. To view a list of available containers and their packages see
# documentation here: https://docs.maap-project.org/en/develop/system_reference_guide/algorithm_registration.html#Container-URLs.
docker_container_url: mas.dit.maap-project.org/root/maap-workspaces/base_images/python:develop


############################################################################### 
# Algorithm Description (optional)
#
# Brief description of the algorithm.
algorithm_description: Unit testing for the DPS.


############################################################################### 
# Build Command (optional)
#
# This is the path to the build file within the algorithm code repository. The
# path is relative to the root of the repository.
#
# The build file is typically used to perform any additional setup required for
# for algorithm execution, such as installing packages that are not available
# in the selected docker container. 
build_command: dps-unit-test/install.sh


############################################################################### 
# Run Command (required)
#
# This is the path to the run file within the algorithm code repository. The
# path is relative to the root of the repository.
#
# The run file is the file the container will execute. It contains the commands
# to run the algorithm.
run_command: dps-unit-test/run-test.sh


############################################################################### 
# Disk Space (required)
#
# This is the approximate disk space to allocate within the worker for
# algorithm execution.
#
# Disk space may be allocated in units of GB, MB, or KB. The maximum allowable
# is 90GB.
disk_space: 1GB


############################################################################### 
# Resource Allocation (or queues) (required)
#
# Compute resources to allocate for the worker that will execute the algorithm.
# For a list of available resource see documentation here:
# https://docs.maap-project.org/en/develop/system_reference_guide/dps_queues.html
queue: maap-dps-worker-8gb


############################################################################### 
# Inputs (optional)
#
# These are the inputs to the algorithm. If the algorithm has no inputs, remove
# everything below the 'inputs' key. If, for example, an algorithm has no file
# inputs, the 'file' key can be removed.
#
# There are three input types: positional, file, and config:
# 
#    * positional
#      Inputs defined here will be used as inputs to the run command defined as
#      run_command. The order in which the inputs are defined will be preserved
#      when building the run_command. It is recommended that positional inputs 
#      be used when users wish to change the behavior of the run command
#      and not the behavior of the algorithm e.g. adding a verbose flag.
#
#    * file
#      Inputs defined here will be downloaded and placed in a directory named
#      'inputs'.
#
#    * config
#      Inputs defined here will be written to a json file named 'inputs.json' in 
#      the working directory. It is recommended that config inputs be used to
#      change the behavior of the algorithm the user runs.
#
#
# The 'config' and 'positional' input types support the 'data_type' field, which
# defines an input's data type. The supported data types are: boolean, string, 
# number, and object (array or dictionary). For positional input types, this
# field will be used as metadata only; all positional input types will be
# interpreted as strings when building the run command. File input types are
# treated as strings.
#
# All inputs defined will be used. If a defined input is not provided, its
# default value will be used. If it has no default value, that input must be
# provided. Users who may want to omit inputs defined under the config
# input type must handle that within their algorithms.
inputs:
# Remove everything below this line if there are no inputs
  positional:
    - name: verbose
      description:
      default: 
      data_type:
  file:
    - name: my_s3_file
      description: 
      default:
  config:
    - name: minVal
      description: Minimum value
      default: 0
      data_type: number
      
    - name: maxVal
      description: Maximum value
      default: 10
      data_type: number